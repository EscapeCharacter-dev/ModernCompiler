#include "Parser.h"
#include <stdlib.h>
#include <string.h>

static struct Node *CreateNode(struct Node *left, struct Node *right, struct LexDescriptor *descriptor, I kind) {
    struct Node *node = malloc(sizeof(struct Node));
    node->Left = left;
    node->Right = right;
    node->Token = descriptor;
    node->Kind = kind;
    return node;
}

static struct Node *ParsePrimary();
struct Node *ParsePrecedence(I ptp);

static I Arithm(I operator) {
    switch (operator) {
    case LEX_TOK_PLUS:
        return PARSER_NODE_ADD;
    case LEX_TOK_MINUS:
        return PARSER_NODE_SUB;
    case LEX_TOK_STAR:
        return PARSER_NODE_MUL;
    case LEX_TOK_SLASH:
        return PARSER_NODE_DIV;
    case LEX_TOK_PERCENT:
        return PARSER_NODE_MOD;
    }
}

static struct Node *ParsePrecedence(I ptp) {
    struct Node *left, *right;
    struct LexDescriptor *descriptor;
    left = ParsePrimary();
    descriptor = LexNext();
    if (descriptor->Kind == LEX_TOK_EOF) {
        return left;
    }
    I precedence;
    switch (descriptor->Kind) {
    case LEX_TOK_PLUS:
    case LEX_TOK_MINUS:
        precedence = 1;
        break;
    case LEX_TOK_STAR:
    case LEX_TOK_SLASH:
    case LEX_TOK_PERCENT:
        precedence = 2;
        break;
    }
    while (precedence > ptp) {
        right = ParsePrecedence(precedence);
        left = CreateNode(left, right, descriptor, Arithm(descriptor->Kind));
        struct LexDescriptor *peeking = LexPeekNext();
        if (peeking->Kind == LEX_TOK_EOF) {
            return left;
        }
    }
    return left;
}

static struct Node *ParseUnary(struct LexDescriptor *current) {
    switch (current->Kind) {
    case LEX_TOK_MINUS:
        return CreateNode(ParsePrimary(), 0, current, PARSER_NODE_NEG);
    case LEX_TOK_OPARENT:
        return CreateNode(ParsePrecedence(0), 0, current, PARSER_NODE_PAR);
    }
}

static struct Node *ParsePrimary() {
    struct LexDescriptor *descriptor = LexNext();
    if (descriptor->Kind == LEX_TOK_MINUS || descriptor->Kind == LEX_TOK_OPARENT) {
        return ParseUnary(descriptor);
    }
    return CreateNode(0, 0, descriptor, PARSER_NODE_LIT);
}

struct Node *Parse(const char *filepath) {
    LexOpen(filepath);
    struct Node *node = ParsePrecedence(0);
    LexClose();
    return node;
}